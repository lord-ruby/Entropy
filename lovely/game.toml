[manifest]
version = "1.0.0"
dump_lua = true
priority = -1
[[patches]]
[patches.pattern]
target = "functions/state_events.lua"
pattern = 'G.GAME.hands[text].played = G.GAME.hands[text].played + 1'
position = "before"
payload = 'if not G.GAME.hands[text] then G.GAME.hands[text] = G.GAME.hands["High Card"] end'
match_indent = true


[[patches]]
[patches.pattern]
target = "game.lua"
pattern = "self.GAME.starting_deck_size = #G.playing_cards"
position = "before"
payload = '''
if G.GAME.modifiers.ccd2 then
    for k, v in pairs(G.playing_cards) do
        local key = ""
        local ptype = pseudorandom_element({
            "Booster",
            "Voucher",
            "Tarot",
            "Joker",
            "Consumeable",
        }, pseudoseed("segfault"))
        if ptype == "Consumeable" then
            key = Cryptid.random_consumable("entr_segfault", nil, "c_entr_segfault").key
        else
            key = pseudorandom_element(G.P_CENTERS, pseudoseed("segfault"))
            local tries = 0
            while key.set ~= ptype or key.no_doe or G.GAME.banned_keys[key.key] do --i love when my key has keys
                key = pseudorandom_element(G.P_CENTERS, pseudoseed("segfault"))
                tries = tries + 1
            end
            key = key.key
        end
        v:set_ability(G.P_CENTERS[key])
    end
end
'''
match_indent = true


[[patches]]
[patches.pattern]
target = "main.lua"
pattern = '''function love.load()'''
position = "before"
payload = '''
Entropy = {}
Entropy.FlipsideInversions = {} --key is the original consumables key and value is the inversions key

Entropy.References = {} --this is for the reference pack pool
Entropy.ChaosConversions = {} --when a set shows up with chaos it will be replaced if the set is a key in this table
Entropy.ChaosBlacklist = {}
Entropy.ParakmiBlacklist = {} --blacklisted sets from showing up with these jokers
--for oekrep
--keys are consumable sets and values are the mega booster packs key
Entropy.BoosterSets = {}

--for push -f
Entropy.RarityPoints = {
    [1] = 1, --common
    [2] = 4, --uncommon
    [3] = 12, --rare
    ["cry_epic"] = 60,
    [4] = 300, --legendary
    ["cry_exotic"] = 1000,
    ["entr_hyper_exotic"] = 5000,
}
--higher rarities give less points so the diminisher is used in division
Entropy.RarityDiminishers = {
    [1] = 1,
    [2] = 1.5,
    [3] = 2.5,
    [4] = 5,
    ["cry_epic"] = 4,
    ["cry_exotic"] = 10,
    ["entr_hyper_exotic"] = 15
}
Entropy.EditionFactors = {
    ["e_foil"] = 1.25,
    ["e_holo"] = 1.45,
    ["e_polychrome"] = 2,
    ["e_negative"] = 2.1,
    ["e_cry_glitched"] = 1.4,
    ["e_cry_mosaic"] = 2.2,
    ["e_cry_oversaturated"] = 1.5,
    ["e_cry_fragile"] = 1.8,
    ["e_cry_gold"] = 1.7,
    ["e_cry_blurred"] = 1.5,
    ["e_cry_noisy"] = 1.7,
    ["e_cry_astral"] = 2.2,
    ["e_cry_m"] = 1.45
}
--for define
--table key must be either the banned key set or rarity and value must be true
--but define also applies the pointer blacklist so this is stuff that only define bans
Entropy.DefineBlacklist = {}

--for disavow
--keys are enhancement keys and functions apply to the cards
--only parameter is the card
Entropy.EnhancementFuncs = {}

--for twisted packs
Entropy.RareInversions = {
    ["c_entr_define"] = "c_entr_define",
    ["c_entr_beyond"] = "c_entr_beyond",
    ["c_entr_fervour"] = "c_entr_fervour"
}

--more rarity related stuff
--these are in order
--idk if candy is worst but below 0 is fine
--used for anything that checks if a rarity is above a certain level
Entropy.RarityChecks = {
    [0]="cry_candy",
    1,
    2,
    3,
    "cry_epic",
    4,
    "cry_exotic",
    "entr_hyper_exotic"
}
Entropy.AscendedTags = {}
--for destiny
Entropy.FixedRecipes = {
    c_basec_basec_basec_basec_base = "j_joker",
    m_steelm_steelm_steelm_steelm_steel = "j_cry_clockwork"
}
--these cannot show up as blink tokens
Entropy.BlindTokenBlacklist = {
  bl_entr_endless_entropy_phase_one=true,
  bl_entr_endless_entropy_phase_two=true,
  bl_entr_endless_entropy_phase_three=true,
  bl_entr_endless_entropy_phase_four=true
}
Entropy.ConsumablePackBlacklist = {
  p_mupack_multipack1=true,
  p_mupack_multipack2=true,
  p_mupack_multipack3=true,
  p_mupack_multipack4=true,
  p_mupack_multipack5=true,
}
--secret related stuff
--specifically used for registering zenith skins with Entropy.RegisterZenithSkin
Entropy.Zeniths = {}
Entropy.RubySaves = {}
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card_character.lua"
pattern = 'self.children.card:set_ability(G.P_CENTERS.j_jolly)'
position = "after"
payload = "self.children.card:set_ability(G.P_CENTERS.j_entr_surreal_joker)"
match_indent = true

### Display exponential blind amount

[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = '''self.chips = get_blind_amount(G.GAME.round_resets.ante)*self.mult*G.GAME.starting_params.ante_scaling'''
position = "before"
payload = '''
if (not self.exponent) or self.exponent[2] <= 0 then
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = '''self.mult = blind and blind.mult or 0'''
position = "after"
payload = '''
self.exponent = blind and blind.exponent or {1,0}
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "blind.lua"
pattern = '''self.chips = get_blind_amount(G.GAME.round_resets.ante)*self.mult*G.GAME.starting_params.ante_scaling'''
position = "after"
payload = '''
elseif self.exponent[2] > 0 then
    local initial = get_blind_amount(G.GAME.round_resets.ante)*G.GAME.starting_params.ante_scaling
    initial = initial:arrow(self.exponent[1], self.exponent[2])
    self.chips = initial
end
'''
match_indent = true

### display exponential blind 2
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''        ability_text[1] and {n=G.UIT.R, config={align = "cm", padding = 0.08, colour = mix_colours(blind.boss_colour, G.C.GREY, 0.4), r = 0.1, emboss = 0.05, minw = 2.5, minh = 0.9}, nodes=ability_text} or nil
      }}'''
position = "after"
payload = '''
end
'''
match_indent = true

### display exponential blind 3
[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''local blind_amt = get_blind_amount(G.GAME.round_resets.blind_ante)*blind_choice.config.mult*G.GAME.starting_params.ante_scaling'''
position = "after"
payload = '''
if blind_choice.config.exponent then
      local initial = get_blind_amount(G.GAME.round_resets.ante)*G.GAME.starting_params.ante_scaling
      initial = initial:arrow(blind_choice.config.exponent[1], blind_choice.config.exponent[2])
      blind_amt = initial
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = '''local stake_sprite = get_stake_sprite(G.GAME.stake or 1, 0.4)'''
position = "after"
payload = '''
if blind.exponent then
    local exponents = ""
    local exponents2 = ""
    for i = 1, blind.exponent[1] do
      exponents = exponents .. "^"
    end
    if blind.exponent[1] > 5 then
      exponents = ""
      exponents2 = "{" .. blind.exponent[1] .. "}"
    end
    blind_text[#blind_text + 1] =
      {n=G.UIT.R, config={align = "cm", emboss = 0.05, r = 0.1, minw = 2.5, padding = 0.07, colour = G.C.WHITE}, nodes={
        {n=G.UIT.R, config={align = "cm", maxw = 2.4}, nodes={
          {n=G.UIT.T, config={text = localize('ph_blind_score_at_least'), scale = 0.35, colour = G.C.UI.TEXT_DARK}},
        }},
        {n=G.UIT.R, config={align = "cm"}, nodes={
          {n=G.UIT.O, config={object = stake_sprite}},
          {n=G.UIT.T, config={text = exponents .. blind.exponent[2].. exponents2 .." "..localize('k_entr_base'), scale = 0.4, colour = G.C.RED}},
        }},
        {n=G.UIT.R, config={align = "cm"}, nodes={
          {n=G.UIT.T, config={text = localize('ph_blind_reward'), scale = 0.35, colour = G.C.UI.TEXT_DARK}},
          {n=G.UIT.O, config={object = DynaText({string = {_dollars and string.rep(localize('$'),_dollars) or '-'}, colours = {G.C.MONEY}, rotate = true, bump = true, silent = true, scale = 0.45})}},
        }},
        ability_text[1] and {n=G.UIT.R, config={align = "cm", padding = 0.08, colour = mix_colours(blind.boss_colour, G.C.GREY, 0.4), r = 0.1, emboss = 0.05, minw = 2.5, minh = 0.9}, nodes=ability_text} or nil
      }}
else
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "tag.lua"
pattern = '''local tag_sprite = Sprite(0,0,_size*1,_size*1,G.ASSET_ATLAS[(not self.hide_ability) and G.P_TAGS[self.key].atlas or "tags"], (self.hide_ability) and G.tag_undiscovered.pos or self.pos)'''
position = "at"
payload = '''
local tagatlas = G.ASSET_ATLAS[(not self.hide_ability) and G.P_TAGS[self.key].atlas or "tags"]
if self.ability.shiny and not self.hide_ability then
  if G.P_TAGS[self.key].shiny_atlas then
		tagatlas = G.ASSET_ATLAS[G.P_TAGS[self.key].shiny_atlas]
  elseif not G.P_TAGS[self.key].atlas then
		tagatlas = G.ASSET_ATLAS['cry_shinyv']
	elseif G.P_TAGS[self.key].atlas == 'cry_tag_cry' then
		tagatlas = G.ASSET_ATLAS['cry_shinyc']
	end
end

local tag_sprite = Sprite(0,0,_size*1,_size*1,tagatlas, (self.hide_ability) and G.tag_undiscovered.pos or self.pos)
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "card.lua"
pattern = '''self.ability.bonus = self.ability.bonus - old_center.config.bonus'''
position = "at"
payload = '''
if self.ability.bonus then
  self.ability.bonus = (self.ability.bonus) - old_center.config.bonus
else 
  self.ability.bonus = 0
end
'''
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "{n=G.UIT.T, config={text = localize('ph_blind_score_at_least'), scale = 0.3, colour = G.C.WHITE, shadow = true}}"
position = "at"
payload = "{n=G.UIT.T, config={text = localize('ph_blind_score_at_least'), scale = 0.3, colour = G.C.WHITE, shadow = true, id='score_at_least'}}"
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/UI_definitions.lua"
pattern = "          G.GAME.stake > 1 and {"
position = "before"
payload = '''
        {
          label = G.GAME.DefineKeys and localize('b_definitions'),
          tab_definition_function = G.GAME.define_keys and G.UIDEF.define_keys or nil,
        },
        {
          label = G.GAME.entr_bought_decks and #G.GAME.entr_bought_decks > 0 and localize('b_decks') or nil, 
          tab_definition_function = G.GAME.entr_bought_decks and #G.GAME.entr_bought_decks > 0 and G.UIDEF.bought_decks or nil,
        },'''
match_indent = true

[[patches]]
[patches.pattern]
target = "game.lua"
pattern = 'Cryptid.profile_prefix = "M"'
position = "after"
payload = 'Cryptid.profile_prefix = Cryptid.profile_prefix == "M" and "E" or Cryptid.profile_prefix.."E"'
match_indent = true

[[patches]]
[patches.pattern]
target = "functions/common_events.lua"
pattern = 'if card and card.playing_card then SMODS.drawn_cards[#SMODS.drawn_cards+1] = card end'
position = "after"
payload = '''if card and card.playing_card and HasJoker("j_entr_jokerinyellow") then
                for i, v in pairs(G.jokers.cards) do
                    if v.config.center.key == "j_entr_jokerinyellow" then
                        if pseudorandom("kiy") < cry_prob(v.ability.cry_prob, v.ability.extra.odds, v.ability.cry_rigged) / v.ability.extra.odds then
                            card.ability.entr_yellow_sign = true
                        end
                    end
                end
            end
'''
match_indent = true
